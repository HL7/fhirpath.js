#!/usr/bin/env node

const fp = require('../src/fhirpath');
const fs = require('fs');
const yaml = require('js-yaml');
const options = require('commander');
options.description('Parses and/or runs a FHIRPath expression.  If neither --resourceFile nor --resourceJSON is provided, the parse tree of the FHIRPath expression will be output.');
options.option('-b, --basePath <path>', 'base path in the resource from which the JSON data was extracted.');
options.option('-e, --expression <expr>', 'FHIRPath expression.');
options.option('-f, --resourceFile <path name>', 'A file containing the JSON resource or part of it, if basePath is passed.');
options.option('-r, --resourceJSON <JSON>', 'JSON resource or part of it, if basePath is passed.');
options.option('-v, --variables <JSON>', 'JSON hash of variables.');
options.option('-m, --model <dstu2 | stu3 | r4>', 'Include FHIR model data.');
options.parse(process.argv);

// this cli util is part of public interface of fhirpath
// it can be extended with understading urls and files
// TODO: introduce subcommands to inspect, eval fhirpath etc

const expression =  options.expression;
const base =  options.basePath;

if (!expression)
  options.help();
else {
  let resourceJSON = options.resourceJSON;
  if (!resourceJSON) {
    let resourceFile = options.resourceFile;
    if (resourceFile)
      resourceJSON = fs.readFileSync(resourceFile);
  }
  if (!resourceJSON) {
    // Just display the parse tree
    let res = fp.parse(expression);
    console.log('Parse tree for fhirpath(' + expression + ') =>');
    console.log(yaml.dump(res));
  }
  else {
    let context = options.variables;
    if (context)
      context = JSON.parse(context);
    let resource = JSON.parse(resourceJSON);
    let model;
    if (options.model) {
      let supportedVersions = ['dstu2', 'stu3', 'r4'];
      if (supportedVersions.indexOf(options.model) < 0)
        throw new Error('FHIR model must be one of '+supportedVersions);
      model = require('../fhir-context/'+options.model);
    }
    let res = fp.evaluate(resource, base ? {base, expression} : expression, context, model);
    console.log('fhirpath(' + expression + ') =>');
    console.log(JSON.stringify(res, null, " "));
  }
}
