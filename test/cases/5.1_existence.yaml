tests:
  - desc: '5. Functions'
  - desc: '5.1 Existence'
  - desc: '5.1.1. empty() : boolean'
# Returns true if the input collection is empty ({ }) and false otherwise.

  - desc: '** empty coll'
    expression: Functions.attrempty.empty()
    result: [true]

  - desc: '** not empty coll'
    expression: Functions.attrsingle.empty()
    result: [false]

  - desc: '** empty nothing'
    expression: Functions.nothing.empty()
    result: [true]

  - desc: '5.1.2. not() : boolean'
# Returns true if the input collection evaluates to
# false, and false if it evaluates to true. Otherwise, the result is empty ({
# }):

#  	not
# true

# false

# false

# true

# empty ({ })

# empty ({ })

  - desc: '** not true is false'
    expression: Functions.attrtrue.not()
    result: [false]

  - desc: '** not false is true'
    expression: Functions.attrfalse.not()
    result: [true]

  - desc: '** true with double not is true'
    expression: Functions.attrtrue.not().not()
    result: [true]

  - desc: '** empty coll with not() is empty coll'
    expression: Functions.attrempty.not()
    result: []

  - desc: '** multi-valued coll with not() is invalid'
    expression: Functions.attrdouble.not()
    error: true

  - desc: '** not nothing is empty coll'
    expression: Functions.nothing.not()
    result: []


  - desc: '5.1.3. exists([criteria : expression]) : boolean'
#  Returns true if the collection has any elements, and false otherwise. This is the opposite of
# empty(), and as such is a shorthand for empty().not(). If the input collection
# is empty ({ }), the result is false.

  - desc: '** exists for not empty coll should return true'
    expression: Functions.coll1.exists()
    result: [true]


  - desc: '** exists for empty coll should return false'
    expression: Functions.attrempty.exists()
    result: [false]

  - desc: '** exists for undefined coll should return false'
    expression: Functions.nothing.exists()
    result: [false]

# The operator can also take an optional criteria to be applied to the collection prior to the determination of the exists. In this case, the operation is shorthand for where(criteria).exists().

  - desc: '** exists with criteria should work'
    expression: Functions.coll1.coll2.attr.exists($this > 0)
    result: [true]

  - desc: '** exists with criteria should work for empty filtered coll'
    expression: Functions.coll1.coll2.attr.exists($this < 0)
    result: [false]

  - desc: '** exists with criteria should work for not exists coll '
    expression: Functions.nothing.attr.exists($this < 0)
    result: [false]


  - desc: '5.1.4. all(criteria : expression) : boolean'
# Returns true if for every element in the input collection, criteria evaluates to true. Otherwise, the result is
# false. If the input collection is empty ({ }), the result is true.

  - desc: '** all for empty coll is true'
    expression: Functions.attrempty.all($this > 0)
    result: [true]

  - desc: '** all for non-exists coll is true'
    expression: Functions.nothing.all($this > 0)
    result: [true]

  - desc: '** all for evaluations is true'
    expression: Functions.coll1.coll2.attr.all($this > 0)
    result: [true]


  - desc: '** not all evaluations is true'
    expression: Functions.coll1.coll2.attr.all($this = 5)
    result: [false]

  - desc: '** the ability to use $index in the expression'
    expression: (0|1|2|3).all($this = $index)
    result: [true]


  - desc: '5.1.5. allTrue() : boolean'
# Takes a collection of boolean values and returns
# true if all the items are true. If any items are false, the result is false.
# If the input is empty ({ }), the result is true.

  - desc: '** allTrue for empty coll is true'
    expression: Functions.attrempty.allTrue()
    result: [true]

  - desc: '** allTrue for coll with all true items is true'
    expression: Functions.coll1.colltrue.attr.allTrue()
    result: [true]

  - desc: '** allTrue for coll with false value'
    expression: Functions.coll1.collwithfalse.attr.allTrue()
    result: [false]

  - desc: '** allTrue for non exists coll is true'
    expression: Functions.nothing.allTrue()
    result: [true]


  - desc: '5.1.6. anyTrue() : boolean'
# Takes a collection of boolean values and returns
# true if any of the items are true. If all the items are false, or if the input
# is empty ({ }), the result is false.

  - desc: '** anyTrue for empty coll is false'
    expression: Functions.attrempty.anyTrue()
    result: [false]

  - desc: '** anyTrue for non-exists coll is false'
    expression: Functions.nothing.anyTrue()
    result: [false]

  - desc: '** anyTrue for coll with true value'
    expression: Functions.coll1.collwithfalse.attr.anyTrue()
    result: [true]

  - desc: '** anyTrue for coll with all false values'
    expression: Functions.coll1.collfalse.attr.anyTrue()
    result: [false]


  - desc: '5.1.7. allFalse() : boolean'
# Takes a collection of boolean values and returns
# true if all the items are false. If any items are true, the result is false.
# If the input is empty ({ }), the result is true.

  - desc: '** allFalse for empty coll is true'
    expression: Functions.attrempty.allFalse()
    result: [true]

  - desc: '** allFalse for non-exists coll is true'
    expression: Functions.nothing.allFalse()
    result: [true]

  - desc: '** allFalse for coll with all false items is true'
    expression: Functions.coll1.collfalse.attr.allFalse()
    result: [true]

  - desc: '** allFalse for coll with true value'
    expression: Functions.coll1.collwithfalse.attr.allFalse()
    result: [false]


  - desc: '5.1.8. anyFalse() : boolean'
# Takes a collection of boolean values and returns
# true if any of the items are false. If all the items are true, or if the input
# is empty ({ }), the result is false.

  - desc: '** anyFalse for empty coll is false'
    expression: Functions.attrempty.anyFalse()
    result: [false]

  - desc: '** anyFalse for non-exists coll is false'
    expression: Functions.nothing.anyFalse()
    result: [false]

  - desc: '** anyFalse for coll with false value'
    expression: Functions.coll1.collwithfalse.attr.anyFalse()
    result: [true]

  - desc: '** anyFalse for coll with all true values'
    expression: Functions.coll1.colltrue.attr.anyFalse()
    result: [false]

  - desc: 'TODO 5.1.5 - 5.1.8 add test for non-boolean values'


  - desc: '5.1.9. subsetOf(other : collection) : boolean'
# Returns true if all items in the
# input collection are members of the collection passed as the other argument.
# Membership is determined using the equals (=) operation (see below).

# Conceptually, this function is evaluated by testing each element in the input
# collection for membership in the other collection, with a default of true.
# This means that if the input collection is empty ({ }), the result is true,
# otherwise if the other collection is empty ({ }), the result is false.

  - desc: '** if input coll is empty - result of subset is true'
    expression: Functions.attrempty.subsetOf(Functions.attrdouble)
    result: [true]

  - desc: '** if argument coll is empty - result of subset is false'
    expression: Functions.attrdouble.subsetOf(Functions.attrempty)
    result: [false]

  - desc: '** if argument coll isnt exists -  result of subset is false'
    expression: Functions.attrdouble.subsetOf(Functions.attrempty)
    result: [false]

  - desc: '** if input coll is subset of argument coll'
    expression: Functions.attrdouble.subsetOf(Functions.coll1[0].coll2.attr)
    result: [true]

  - desc: '** if input coll isnt subset of argument coll'
    expression: Functions.coll1[0].coll2.attr.subsetOf(Functions.attrdouble)
    result: [false]

  - desc: '** should treat objects with different key orders as equivalent'
    expression: Functions.subsetTestC1.subsetOf(Functions.subsetTestC2)
    result: [true]

  - desc: '** 5.1.10. supersetOf(other : collection) : boolean'
# Returns true if all items in the collection passed as the other argument are members of the input
# collection. Membership is determined using the equals (=) operation (see
# below).

# Note - The following paragraph is from the spec, but the spec is in error.
# Conceptually, this function is evaluated by testing each element in the other
# collection for membership in the input collection, with a default of false.
# This means that if the input collection is empty ({ }), the result is false,
# otherwise if the other collection is empty ({ }), the result is true.

  - desc: '** if argumet coll is empty - result of superset is true'
    expression: Functions.attrdouble.supersetOf(Functions.attrempty)
    result: [true]

  - desc: '** if input coll is empty - result of superset is false'
    expression: Functions.attrempty.supersetOf(Functions.attrdouble)
    result: [false]

  - desc: '** if input coll isnt exists and argument is non-empty, result of superset is false'
    expression: Functions.attrempty.supersetOf(Functions.attrdouble)
    result: [false]

  - desc: '** if argument coll is superset of input coll result is true'
    expression: Functions.coll1[0].coll2.attr.supersetOf(Functions.attrdouble)
    result: [true]

  - desc: '** if argument coll isnt superset of input coll result is false'
    expression: Functions.attrdouble.supersetOf(Functions.coll1[0].coll2.attr)
    result: [false]


  - desc: '5.1.11. isDistinct() : boolean'
# Returns true if all the items in the input
# collection are distinct. To determine whether two items are distinct, the
# equals (=) operator is used, as defined below.

# Conceptually, this function is shorthand for a comparison of the count() of
# the input collection against the count() of the distinct() of the input
# collection:

# X.count() = X.distinct().count() This means that if the input collection is
# empty ({ }), the result is true.

  - desc: '** isDistinct of empty input coll is true'
    expression: Functions.attrempty.isDistinct()
    result: [true]

  - desc: '** isDistinct of non-exists coll is true'
    expression: Functions.nothing.isDistinct()
    result: [true]

  - desc: '** isDistinct of distinct coll'
    expression: Functions.coll1.coll2.attr.isDistinct()
    result: [true]

  - desc: '** isDistinct of coll with same values'
    expression: Functions.coll1.collfalse.attr.isDistinct()
    result: [false]


  - desc: '5.1.12. distinct() : collection'
# Returns a collection containing only the
# unique items in the input collection. To determine whether two items are the
# same, the equals (=) operator is used, as defined below.

# If the input collection is empty ({ }), the result is empty.

  - desc: '** distinct of empty coll is empty'
    expression: Functions.attrempty.distinct()
    result: []

  - desc: '** distinct of non-exists coll is empty'
    expression: Functions.nothing.distinct()
    result: []

  - desc: '** distinct of coll with same values'
    expression: Functions.coll1[2].colltrue.attr.distinct()
    result: [true]

  - desc: '** distinct of coll with different values'
    expression: Functions.coll1[0].coll2.attr.distinct()
    result: [1, 2, 3]

  - desc: '** should not depend on the order of properties in an object'
    expression: Functions.objects.distinct()
    result:
      - prop1: 1
        prop2: 2
      - prop1: 3
        prop2: 4
      - prop1: 5
        prop2: 6

  - desc: '** should use year-to-month conversion factor (https://hl7.org/fhirpath/#equals)'
    expression: (1 year).combine(12 months).distinct()
    result:
      - 1 year

  - desc: '** should compare quantities for equality (https://hl7.org/fhirpath/#equals)'
    expression: (3 'min').combine(180 seconds).distinct()
    result:
      - 3 'min'

  - desc: '5.1.13. count() : integer'
# Returns a collection with a single value which is
# the integer count of the number of items in the input collection. Returns 0
# when the input collection is empty.

  - desc: '** count'
    expression: Functions.coll1.count()
    result: [6]

  - desc: '** nested count'
    expression: Functions.coll1.coll2.count()
    result: [5]

  - desc: '** nested count (alternative)'
    expression: Functions.coll1[0].coll2.count()
    result: [3]

  - desc: '** 0 if nothing'
    expression: Functions.ups.count()
    result: [0]


subject:
  resourceType: Functions
  attrempty: []
  attrtrue: true
  attrfalse: false
  attrsingle:
    - 1
  attrdouble:
    - 1
    - 2
  attrobject:
    a: 1
    b: 2
    repeatingAttr: 5
  repeatingAttr:
    repeatingAttr:
      a: 1
    a: 2
  coll1:
    - coll2:
        - attr: 1
        - attr: 2
        - attr: 3
    - coll2:
        - attr: 4
        - attr: 5
    - colltrue:
        - attr: true
        - attr: true
        - attr: true
    - collwithfalse:
        - attr: false
        - attr: true
    - collfalse:
        - attr: false
        - attr: false
    - mixed:
        - attr: true
        - attr: false
        - attr: 'test string'
        - attr: 999
        - attr: 3.14159
        - attr: '@2015-02-04T14:34:28Z'
        - attr: '@T14:34:28+09:00'
        - attr: 4 days
  subsetTestC1:
    - a: 1
      b: 2
      1: 3
      2: 4
      c:
        d: 5
        e: 6
  subsetTestC2:
    - 2: 4
      1: 3
      b: 2
      a: 1
      c:
        e: 6
        d: 5
  objects:
    - prop1: 1
      prop2: 2
    - prop1: 3
      prop2: 4
    - prop2: 2
      prop1: 1
    - prop1: 5
      prop2: 6

